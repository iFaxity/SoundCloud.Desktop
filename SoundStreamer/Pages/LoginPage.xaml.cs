using System;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using System.Windows.Media.Imaging;

using Streamer.SoundCloud;
using Streamer;
using FaxLib;

namespace SoundStreamer {
    /// <summary>
    /// Interaction logic for LoginPage.xaml
    /// </summary>
    public partial class LoginPage : Page {
        const string clientID = "589e0ff400a0bc83ecd8eb20b94b57de";
        const string clientSecret = "4194ded960527644e96fea6cedab671d";
        const string path = "login.json";
        // Cryptor for encrypting user's password
        readonly static Cryptor cryptor = new Cryptor("l6EI53z7[(5)$M293YTZwh?;8gA3z9", "i820<@%PiSj)N6JP2FZg$RTOpF%42^"); //Strong password and salt generated by http://randomkeygen.com/

        public LoginPage() {
            InitializeComponent();

            // Auto login if login is stored in settings
            if(AppSettings.Settings.GetValue<string>("Username") != "" && AppSettings.Settings.GetValue<string>("Password") != "") {
                Task.Factory.StartNew(() => {
                    try {
                        Core.ToggleSpinner(grid);
                        string user = Crypt.Decrypt(AppSettings.Settings.GetValue<string>("Username"), cryptor),
                            pass = Crypt.Decrypt(AppSettings.Settings.GetValue<string>("Password"), cryptor);

                        // Attempt to login
                        if(SoundCloudCore.Connect(new Login(user, pass, clientID, clientSecret)))
                            Dispatcher.Invoke(() => NavigateWindow());
                        Core.ToggleSpinner(grid);
                    }
                    catch { }
                });
            }
        }

        void login_Click(object sender, RoutedEventArgs e) {
            Core.ToggleSpinner(grid);
            // Initialize a client and a token
            var login = new Login(username.Text, password.Password, clientID, clientSecret);

            // Check if client connected sucessfully
            if(SoundCloudCore.Connect(login)) {
                var save = rememberMe.IsChecked;
                if(save.HasValue && save.Value) {
                    AppSettings.Settings.SetValue("Username", Crypt.Encrypt(login.User, cryptor));
                    AppSettings.Settings.SetValue("Password", Crypt.Encrypt(login.Pass, cryptor));
                }
                NavigateWindow();
            }
            else
                MessageBox.Show("Authentication of user '" + login.User + "' failed.");

            password.Clear();
            Core.ToggleSpinner(grid);
        }

        void NavigateWindow() {
            //Fetch Avatar Image
            var window = MainWindow.window;
            window.meImg.Source = new BitmapImage(new Uri(Me.AvatarUrl, UriKind.Absolute));
            window.meName.Text = Me.Fullname;

            // Load all playlists
            Task.Factory.StartNew(() => {
                Core.ToggleSpinner(window.playlistGrid, Colors.LightGray, 75);
                for(int i = 0; i < Me.PlaylistsCount; i++) {
                    foreach(var playlist in Me.GetPlaylists(i, 1)) {
                        Dispatcher.Invoke(() => {
                            // Create a menu row for each playlist
                            var txb = new TextBlock {
                                Foreground = Core.FromHex("#FFB7B7B7"),
                                FontSize = 15,
                                Text = playlist.Title
                            };
                            txb.MouseDown += (sender, e) => window.contentFrame.Navigate(new PlaylistPage(playlist));
                            txb.MouseEnter += window.Menu_Enter;
                            txb.MouseLeave += window.Menu_Leave;
                            // Add playlist to menu
                            window.playlists.Children.Add(txb);
                        });
                    }
                }
                Core.ToggleSpinner(window.playlistGrid);
            });

            // Go to the dashboard/stream
            window.contentFrame.Navigate(window.streamPage = new StreamPage());
        }
        void offline_Click(object sender, RoutedEventArgs e) {

        }
    }
}