//using FaxLib;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

using Streamer.Net.SoundCloud;
using Streamer.Net;
using FaxLib;
using System.Threading;

namespace SoundCloud.Desktop {
    /// <summary>
    /// Interaction logic for LoginPage.xaml
    /// </summary>
    public partial class LoginPage : Page {
        const string clientID = "589e0ff400a0bc83ecd8eb20b94b57de";
        const string clientSecret = "4194ded960527644e96fea6cedab671d";
        const string path = @"login.json";
        readonly static Cryptor cryptor = new Cryptor(@"l6EI53z7[(5)$M293YTZwh?;8gA3z9", @"i820<@%PiSj)N6JP2FZg$RTOpF%42^"); //Strong password and salt generated by http://randomkeygen.com/

        static MainWindow window;

        public LoginPage(MainWindow main) {
            InitializeComponent();
            window = main;

            if(File.Exists(path)) {
                Task.Factory.StartNew(() => {
                    try {
                        var log = JsonConvert.DeserializeObject<Login>(Crypt.DecryptFile(path, cryptor));

                        log.SetClientInfo(clientID, clientSecret);

                        UICore.ToggleSpinner(grid);
                        SoundCloudClient.Connect(log);

                        if(SoundCloudClient.IsConnected)
                            Dispatcher.Invoke(() => NavigateWindow(window));
                        UICore.ToggleSpinner(grid);
                    }
                    catch { }
                });
            }
        }

        private void login_Click(object sender, RoutedEventArgs e) {
            UICore.ToggleSpinner(grid);
            var user = username.Text;
            var save = rememberMe.IsChecked;

            // Initialize a client and a token
            var log = new Login(user, password.Password, clientID, clientSecret);
            SoundCloudClient.Connect(log);
            // Check if client connected sucessfully
            if(!SoundCloudClient.IsConnected) {
                UICore.ToggleSpinner(grid);
                MessageBox.Show("Authentication of user '" + user + "' failed.");
                return;
            }
            // Save login to file if enabled
            else if(save.HasValue && save.Value)
                Crypt.EncryptFile(path, JsonConvert.SerializeObject(log, Formatting.Indented), cryptor);
            // Navigate to next window
            NavigateWindow(window);
            UICore.ToggleSpinner(grid);
        }

        void NavigateWindow(MainWindow window) {
            //Fetch Avatar Image
            BitmapImage avatar = new BitmapImage();
            avatar.BeginInit();
            avatar.UriSource = new Uri(Me.AvatarUrl, UriKind.Absolute);
            avatar.EndInit();
            //Set Avatar image and name
            window.meImg.Source = avatar;
            window.meName.Text = Me.Fullname;

            // Load all playlists 
            Task.Factory.StartNew(() => {
                UICore.ToggleSpinner(window.playlistGrid, 75, Colors.LightGray);
                for(int i = 0; i < Me.PlaylistsCount; i++) {
                    foreach(var playlist in Me.GetPlaylists(i, 1)) {
                        Dispatcher.Invoke(() => {
                            // Create a menu row for each playlist
                            var txb = new TextBlock {
                                Foreground = (Brush)new BrushConverter().ConvertFromString("#FFB7B7B7"),
                                FontSize = 15,
                                Text = playlist.Title
                            };
                            txb.MouseDown += (sender, e) => window.contentFrame.Navigate(new PlaylistFrame(playlist));
                            txb.MouseEnter += (sender, e) => window.Menu_Enter(sender, e);
                            txb.MouseLeave += (sender, e) => window.Menu_Leave(sender, e);
                            // Add playlist to menu
                            window.playlists.Children.Add(txb);
                        });
                    }
                }
                UICore.ToggleSpinner(window.playlistGrid);
            });

            // Go to the dashboard/stream
            window.streamFrame = new StreamFrame();
            window.contentFrame.Navigate(window.streamFrame);
        }

        private void offline_Click(object sender, RoutedEventArgs e) {

        }
    }
}