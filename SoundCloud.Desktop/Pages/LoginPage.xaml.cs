using System;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using System.Windows.Media.Imaging;

using Streamer.Net.SoundCloud;
using Streamer.Net;
using FaxLib;

namespace SoundCloud.Desktop {
    /// <summary>
    /// Interaction logic for LoginPage.xaml
    /// </summary>
    public partial class LoginPage : Page {
        const string clientID = "589e0ff400a0bc83ecd8eb20b94b57de";
        const string clientSecret = "4194ded960527644e96fea6cedab671d";
        const string path = "login.json";
        // Cryptor for encrypting user's password
        readonly static Cryptor cryptor = new Cryptor("l6EI53z7[(5)$M293YTZwh?;8gA3z9", "i820<@%PiSj)N6JP2FZg$RTOpF%42^"); //Strong password and salt generated by http://randomkeygen.com/
        // Used to localise the MainWindow of this application
        static MainWindow window;

        public LoginPage(MainWindow main) {
            InitializeComponent();
            window = main;

            // Auto login if login is stored in settings
            if(AppSettings.Settings.GetValue<string>("Username") != "" && AppSettings.Settings.GetValue<string>("Password") != "") {
                Task.Factory.StartNew(() => {
                    try {
                        UICore.ToggleSpinner(grid);

                        string user = Crypt.Decrypt(AppSettings.Settings.GetValue<string>("Username"), cryptor),
                            pass = Crypt.Decrypt(AppSettings.Settings.GetValue<string>("Password"), cryptor);

                        // Attempt to login
                        SoundCloudCore.Connect(new Login(user, pass, clientID, clientSecret));
                        if(SoundCloudCore.IsConnected)
                            Dispatcher.Invoke(() => NavigateWindow(window));
                        UICore.ToggleSpinner(grid);
                    }
                    catch { }
                });
            }
        }
        private void login_Click(object sender, RoutedEventArgs e) {
            UICore.ToggleSpinner(grid);
            var user = username.Text;
            var save = rememberMe.IsChecked;

            // Initialize a client and a token
            var log = new Login(user, password.Password, clientID, clientSecret);
            SoundCloudCore.Connect(log);

            // Check if client connected sucessfully
            if(!SoundCloudCore.IsConnected) {
                UICore.ToggleSpinner(grid);
                MessageBox.Show("Authentication of user '" + user + "' failed.");
                password.Clear();
                return;
            }
            // Save login to file if enabled
            else if(save.HasValue && save.Value) {
                AppSettings.Settings.SetValue("Username", Crypt.Encrypt(log.User, cryptor));
                AppSettings.Settings.SetValue("Password", Crypt.Encrypt(log.Pass, cryptor));
            }
            // Navigate to next window
            NavigateWindow(window);
            UICore.ToggleSpinner(grid);
        }
        void NavigateWindow(MainWindow window) {
            //Fetch Avatar Image
            window.meImg.Source = new BitmapImage(new Uri(Me.AvatarUrl, UriKind.Absolute));
            window.meName.Text = Me.Fullname;

            // Load all playlists
            Task.Factory.StartNew(() => {
                UICore.ToggleSpinner(window.playlistGrid, Colors.LightGray, 75);
                for(int i = 0; i < Me.PlaylistsCount; i++) {
                    foreach(var playlist in Me.GetPlaylists(i, 1)) {
                        Dispatcher.Invoke(() => {
                            // Create a menu row for each playlist
                            var txb = new TextBlock {
                                Foreground = (Brush)new BrushConverter().ConvertFromString("#FFB7B7B7"),
                                FontSize = 15,
                                Text = playlist.Title
                            };
                            txb.MouseDown += (sender, e) => window.contentFrame.Navigate(new PlaylistPage(playlist));
                            txb.MouseEnter += window.Menu_Enter;
                            txb.MouseLeave += window.Menu_Leave;
                            // Add playlist to menu
                            window.playlists.Children.Add(txb);
                        });
                    }
                }
                UICore.ToggleSpinner(window.playlistGrid);
            });

            // Go to the dashboard/stream
            window.contentFrame.Navigate(window.streamPage = new StreamPage());
        }
        private void offline_Click(object sender, RoutedEventArgs e) {

        }
    }
}